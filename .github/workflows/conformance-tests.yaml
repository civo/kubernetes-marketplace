# Conformance Tests Workflow
#
# This workflow creates a new Civo Kubernetes cluster for each app, runs the
# conformance test if there are changes in the app directory, and then deletes
# the cluster.

name: Conformance Tests

on:
  pull_request:
    types: [labeled]

env:
  BASE: ${{ github.base_ref }}

jobs:
  validate-apps-list:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Validate apps
        run: bash validate_apps.sh

  conformance-test:
    needs: [validate-apps-list]
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 2
      matrix:
        app: ${{ fromJson(env.APPS_JSON) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check if conformance.sh exists and if there are changes
        id: check-conformance
        run: |
          # Check if conformance.sh exists for the app and if there are changes in the current MR
          # If either condition is not met, exit the job without creating the cluster or running the test
          if [ ! -f "${{ matrix.app }}/conformance.sh" ] || ! git diff --name-only $BASE..HEAD | grep -q "${{ matrix.app }}"; then
            echo "conformance.sh does not exist or no changes detected, exiting"
            exit 0
          fi

      - name: Install curl
        run: apt-get update && apt-get install -y curl

      - name: Download Civo CLI
        run: curl -sL https://civo.com/get | sh

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          mv kubectl /usr/local/bin/
          kubectl version --client


      - name: Create Civo Kubernetes cluster
        if: ${{ steps.check-conformance.outputs.exit }}
        env:
          CIVO_API_KEY: ${{ secrets.CIVO_API_KEY }}
        run: |
          CIVO_API_KEY_NAME=test civo apikey save --load-from-env 
          civo apikey use test
          export PATH=$PATH:/root/.civo/bin
          civo kubernetes create ${{ matrix.app }}-cluster --wait --save --merge --switch

      - name: Run conformance test
        if: ${{ steps.check-conformance.outputs.exit }}
        run: |
          cd ${{ matrix.app }} && bash conformance.sh

      - name: Delete Civo Kubernetes cluster
        if: ${{ steps.check-conformance.outputs.exit }}
        env:
          CIVO_API_KEY: ${{ secrets.CIVO_API_KEY }}
        run: |
          export PATH=$PATH:/root/.civo/bin
          civo kubernetes remove ${{ matrix.app }}-cluster --yes
